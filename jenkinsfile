def ip = ""


pipeline{
    agent any 
    tools {
        terraform  'terraform-11'
    }

    stages{
         stage("init") {
            steps {
                script {
                    gv = load "script.groovy"
                }
            }
        }
    
        stage("terraform"){
            

            steps{
              dir('terraform') {
                
                sh " terraform init"
              }
              
            
            }
        }
        stage('terraform apply') {

            steps{
              dir('terraform') {
                sh " terraform apply --auto-approve "
                
                EC2_PUBLIC_IP = sh(
                            script: "terraform output ec2_public_ip",
                            returnStdout: true
                        ).trim()
              }
                
        }
              
        }

          stage("build and push image") {
            steps {
                script {
                    gv.buildImage 'said.farhi72/demo-app:jma-3.0'
                    gv.dockerLogin()
                    gv.dockerPush 'said.farhi72/demo-app:jma-3.0'
                }
            }
        }

        stage("deploy") {
            steps {
                script {
                   echo "waiting for EC2 server to initialize" 
                   sleep(time: 90, unit: "SECONDS") 

                   echo 'deploying docker image to EC2...'
                   echo "${EC2_PUBLIC_IP}"

                   def shellCmd = "bash ./server-cmds.sh ${IMAGE_NAME} ${DOCKER_CREDS_USR} ${DOCKER_CREDS_PSW}"
                   def ec2Instance = "ec2-user@${EC2_PUBLIC_IP}"

                   sshagent(['server-ssh-key']) {
                       sh "scp -o StrictHostKeyChecking=no server-cmds.sh ${ec2Instance}:/home/ec2-user"
                       sh "scp -o StrictHostKeyChecking=no docker-compose.yaml ${ec2Instance}:/home/ec2-user"
                       sh "ssh -o StrictHostKeyChecking=no ${ec2Instance} ${shellCmd}"
                   }
                }
            }
        }





    }


     post {
        always {
            // Cleanup tasks or other actions
        }

        success {
            // Actions for successful build
        }

        failure {
            // Actions for failed build
            echo 'Build failed! Sending notifications...'

           
        }
    }
}
